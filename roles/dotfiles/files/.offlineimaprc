# For documentation, see: /usr/local/etc/offlineimap.conf

[general]

accounts = Home, Work
ui = TTYUI
pythonfile = ~/.mutt/offlineimap.py
fsync = false
maxsyncaccounts = 4
socktimeout = 60

[mbnames]

# We have offlineimap record the mailbox names into a file that mutt can source.
# This gives us explicit control over the ordering in the sidebar.
enabled = yes
filename = ~/.mutt/config/mailboxes.mutt
header = "mailboxes "
peritem = "+%(accountname)s/%(foldername)s"

# Sort important folders up the top, and everything else by account/foldername.
sort_keyfunc = lambda d: (d['accountname'],
                          {'Home': '00',
                           'Home.Starred': '01',
                           'Home.Sent': '02',
                           'Home.Drafts': '03',
                           'Home.Archive': '04',
                           'Home.Trash': '05',
                           'Home.Spam': '06',
                           'Work': '00',
                           'Work.Sent': '02',
                           'Work.Drafts': '03',
                           'Work.Archive': '04',
                           'Work.Trash': '05',
                           'Work.Spam': '06',
                           }.get(d['foldername'], '99'), d['foldername'])

# For now I don't have any that I want to exclude, but can do that later:
# folderfilter = lambda accountname, foldername: not re.search('(^bak.*|.*drafts$|.*spam$|.*sent$|.*trash$)', foldername)

sep = " "
footer = "\n"
incremental = no

[Account Home]

localrepository = Home-Local
remoterepository = Home-Remote
postsynchook = notmuch new
status_backend = sqlite
autorefresh = 1
quick = 15

[Repository Home-Local]

type = GmailMaildir
localfolders = ~/.mail/Home

nametrans = lambda folder: {'Home':                   'INBOX',
                            'Home.Drafts':            '[Gmail]/Drafts',
                            'Home.Sent':              '[Gmail]/Sent Mail',
                            'Home.Spam':              '[Gmail]/Spam',
                            'Home.Starred':           '[Gmail]/Starred',
                            'Home.Trash':             '[Gmail]/Trash',
                            'Home.Archive':           '[Gmail]/All Mail',
                            }.get(folder) or re.sub('^Home\.', '', folder)

[Repository Home-Remote]

type = Gmail
remotepasseval = get_keychain_pass(account="greg+mutt@hurrell.net", server="imap.gmail.com")
sslcacertfile = /usr/local/etc/openssl/cert.pem
remoteuser = greg@hurrell.net
maxconnections = 1
realdelete = no

# Skip XOAUTH2 because I haven't bothered to configure it, which makes it print
# a noisy error.
auth_mechanisms = GSSAPI, CRAM-MD5, PLAIN, LOGIN

nametrans = lambda folder: {'INBOX':             'Home',
                            '[Gmail]/Drafts':    'Home.Drafts',
                            '[Gmail]/Sent Mail': 'Home.Sent',
                            '[Gmail]/Starred':   'Home.Starred',
                            '[Gmail]/Spam':      'Home.Spam',
                            '[Gmail]/Trash':     'Home.Trash',
                            '[Gmail]/All Mail':  'Home.Archive',
                            }.get(folder) or re.sub('/', '.', 'Home.' + folder)
folderfilter = lambda folder: folder not in ['[Gmail]/Important']

[Account Work]

localrepository = Work-Local
remoterepository = Work-Remote
postsynchook = notmuch new
status_backend = sqlite
autorefresh = 1
quick = 15

[Repository Work-Local]

type = Maildir
localfolders = ~/.mail/Work

nametrans = lambda folder: {'Work':       'INBOX',
                            'Work.Sent':  'Sent Items',
                            'Work.Spam':  'Junk Email',
                            'Work.Trash': 'Deleted Items',
                            }.get(folder) or re.sub('^Work\.', '', folder)

[Repository Work-Remote]

type = IMAP
remotepasseval = get_keychain_pass(account="glh@fb.com", server="outlook.office365.com")
sslcacertfile = /usr/local/etc/openssl/cert.pem
remoteuser = glh@fb.com
remotehost = outlook.office365.com
remoteport = 993
ssl = yes
maxconnections = 1
realdelete = no

# Skip XOAUTH2 because I haven't bothered to configure it, which makes it print
# a noisy error.
auth_mechanisms = GSSAPI, CRAM-MD5, PLAIN, LOGIN

nametrans = lambda folder: {'INBOX':         'Work',
                            'Sent Items':    'Work.Sent',
                            'Junk Email':    'Work.Spam',
                            'Deleted Items': 'Work.Trash',
                            }.get(folder) or re.sub('/', '.', 'Work.' + folder)

# Unlike "Home", for "Work" we use a whitelist instead of blacklist for now
# because I am not in the habit of creating folders for different kinds of
# email (it's either inbox-worthy, archiveable, or trashable).
folderfilter = lambda folder: folder in ['INBOX',
                                         'Archive',
                                         'Deleted Items',
                                         'Drafts',
                                         'Junk Email',
                                         'Sent Items']

# Work around endemic:
#
#   From: Microsoft Exchange Server 2010
#   Subject: Retrieval using the IMAP4 protocol failed for the following message: 15541
#
# Could also delete + expunge the offending messages, but I am too lazy for
# that. This is a little less work.
#
# See:
#
# - http://www.offlineimap.org/server/imap/error/2016/01/27/error-no-such-number.html
# - https://github.com/OfflineIMAP/offlineimap/issues/62
#
copy_ignore_eval = copy_ignore("""

  Work.Trash:
  - 4949
  - 4962
  - 4964
  - 4967
  - 4969
  - 4985
  - 4997
  - 5009
  - 5014
  - 5031
  - 5051
  - 5057
  - 5059
  - 5070
  - 5096
  - 5097
  - 5098
  - 5114
  - 5125

  Work.Archive:
  - 85862
  - 93992
  - 93997
  - 95838
  - 106359
  - 106360
  - 106369
  - 324291
  - 324297
  - 324298
  - 324306
  - 324308
  - 324310
  - 324343
  - 324354

  """)
